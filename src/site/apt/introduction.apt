 ------
GWT Maven Plugin Usage
 ------
 ------
 ------

Configuring Google Web Toolkit support for maven

* Translate GWT application to JavaScript

  You can use the following configuration in your pom.xml to run the GWT compiler
  when the project is built. By default, the {{{compile-mojo.html}compile}} goal is configured
  to be executed during the ''process-class'' phase.

+---+
<project>
  [...]
  <build>
    <plugins>
      [...]
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>gwt-maven-plugin</artifactId>
        <executions>
          <execution>
            <configuration>
              <module>com.mycompany.gwt.Module</module>
            </configuration>
            <goals>
              <goal>compile</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      [...]
    </plugins>
  </build>
  [...]
</project>
+---+

* Generate Async interface for GWT-RPC services

  The {{{generateAsync-mojo.html}generateAsync}} goal will create a generate-sources folder an create Async interface for all
  RemoteInterface found in the project. To avoid a full scan, only Java source files that matches a
  pattern (defaults to ''**/*Service.java'') are checked.

+---+
<project>
  [...]
  <build>
    <plugins>
      [...]
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>gwt-maven-plugin</artifactId>
        <executions>
          <execution>
            <configuration>
              <servicePattern>**/gwt/**/*Service.java</servicePattern>
            </configuration>
            <goals>
              <goal>compile</goal>
              <goal>generateAsync</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      [...]
    </plugins>
  </build>
  [...]
</project>
+---+


* Setup hosted mode browser

  The {{{eclipse-mojo.html}eclipse}} goal can be used to create an eclipse launch configuration for executing the GWT
  module in hosted browser mode. The required native libraries are also downloaded and installed in
  the user local repository.

+---+
<project>
  [...]
  <build>
    <plugins>
      [...]
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>gwt-maven-plugin</artifactId>
        <executions>
          <execution>
            <configuration>
              <module>com.mycompany.gwt.Module</module>
            </configuration>
            <goals>
              <goal>eclipse</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      [...]
    </plugins>
  </build>
  [...]
</project>
+---+

* Run GWTTestCase inside maven

  GWTTestCase requires soem complex setup that makes them difficult ot run in maven with the
  surefire plugin. Such tests also are long and setup the whole GWT module, so they are not
  ''unit'' but ''integration'' tests.

  The {{{test-mojo.html}test}} goal can be used to run GWTTestCase during the intergation-test
  phase. It will fork a process with the required arguments to run the test, and will report
  on the console the result. It will also create the standard surefire-reports to be used
  by project site reporting.

  To avoid conflicts with unit tests, we recommand to follow the naming convention to prefix
  your GWT tests with ''GWTTest'' and to use an exclusion patterns in surefire plugin
  configuration :

+---+
<project>
  [...]
  <build>
    <plugins>
      [...]
      <plugin>
        <artifactId>maven-surefire-plugin</artifactId>
        <configuration>
          <excludes>
            <exclude>**/*GwtTest.java</exclude>
          </excludes>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>gwt-maven-plugin</artifactId>
        <executions>
          <execution>
            <goals>
              <goal>test</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      [...]
    </plugins>
  </build>
  [...]
</project>
+---+