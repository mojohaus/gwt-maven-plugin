 ------
GWT Maven Plugin Introduction
 ------
 ------
 ------

Introduction

  This maven plugin is dedicated to the Google Web Toolkit integration in maven.

  It's primary goal is to run the GWT SDK tools from maven, and also to mimic the GWT
  integration with Eclipse IDE.

  It's secondary goal is to use maven dependency management to avoid installation of
  the GWT SDK on the developper platform. Importing a GWT-based application as maven
  project then requires no setup on the developer computer.

  GWT Maven Plugin supports :

  * GWT compiler execution,

  * creating Eclipse launch configuration to start the project module(s) in GWT hosted mode,

  * creating Eclipse launch configuration to run GWTTestCase-based unit tests in eclipse,

  * running tests (and test suites) based on GWTTestCase framework

  * code generation for GWT-RPC Async interface from synchronous server-side interfaces.

  * code generation for GWT internalionalization ("i18n")

  * run (or debug) the Hosted browser from Maven

Hosted mode support

  The hosted mode is a GWT tool for quick development. It uses a tiny web server (based on Jetty) 
  to host static file and GW6RPC servlets, and launch a custom web browser that runs your client-side
  code as Java without requirement to compile into JavaScript.
  
  The hosted mode is not designed to host a JEE application with many server-side framework. Don't try
  to use it to setup Spring, Hibernate or a JNDI DataSource. It is expected to only host stub servlets 
  to help you quickly test and debug your client-side code. 
  
  For those reasons, the plugin can't use the standard <<<src/main/webapp>>> web folder. The plugin sets
  as a convention that the hosted mode server web root is <<</war>>> to match the 
  {{{http://code.google.com/intl/fr-FR/eclipse/}Google Eclipse plugin}}
  hard-coded path. For the hosted server to run, this folder must contain a full exploded webapp, 
  including java libraries and classes. The GWT runtime doesn't support running this server with 
  maven dependencies and compilation folders.
  
  To match this requirement, the simpliest configuration is to setup your project outputDirectory as
  <<<war/WEB-INF/classes>>> in replacement for <<<target/classes>>>. With this configuration
  Maven (or your IDE) will compile classes in the expected folder. The gwt:run goal will put the runtime
  dependencies into <<<war/WEB-INF/lib>>> before launching the hosted server. 
  
  You can also run the hosted mode with the <<<-noserver>>> option. In such case, you have to configure
  your web application from <<<src/main/webapp>>> to host all the necessary GWT-RPC and static resources.
  For better productivity, we recommend to use the 
  {{{http://maven.apache.org/plugins/maven-war-plugin/exploded-mojo.html}inplace exploded structure}}  
  or the jetty maven plugin.