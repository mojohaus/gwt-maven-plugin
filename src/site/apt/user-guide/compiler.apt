 ------
GWT Maven Plugin Usage
 ------
 ------
 ------

Compile GWT application into JavaScript

  You can use the following configuration in your pom.xml to run the GWT compiler
  when the project is built. By default, the {{{compile-mojo.html}compile}} goal is configured
  to be executed during the ''process-classes'' phase to run as late as possible.

+--
<project>
  [...]
  <build>
    <plugins>
      [...]
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>gwt-maven-plugin</artifactId>
        <version>1.1</version>
        <executions>
          <execution>
            <configuration>
              <module>com.mycompany.gwt.Module</module>
            </configuration>
            <goals>
              <goal>compile</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      [...]
    </plugins>
  </build>
  [...]
</project>
+--

* Configure GWT modules

  The <<<module>>> paramter can be used to define a single module in your application. You can also configure 
  compilation for multiple modules by nesting them inside a ''<modules>'' element. If none is
  set, the plugin will automagically scan project source and resources directories for ''.gwt.xml'' module files.

  You can also force the plugin to compile a module from command line by setting the <<<gwt.module>>> system property.

* Tweak the compiler output


  By default, the GWT compiler is run with WARN logging. If you have compilation issues, you may want it to
  be more verbose. Simply add a command line option :
  
+---+  
  -Dgwt.logLevel=[LOGLEVEL]
+---+  

  Where LOGLEVEL can be ERROR, WARN, INFO, TRACE, DEBUG, SPAM, or ALL
  
  The compiler style is set to its default value (<<<OBFUSCATED>>>) to generate compact javascript. You can override this
  for debugging purpose of the generated javascript by running with command line option :
  
+---+  
  -Dgwt.style=[PRETTY|DETAILED]
+---+    
  
  The compiler will output the generated javascript in the project output folder (<<<${project.build.directory}/${project.build.finalName}>>>). 
  For a WAR project, this matches the exploded web application root. You can override this behaviour by setting the ''outputDirectory''
  parameter. For example, you may want to configure output to <<<${basedir}/src/main/webapp>>> if you have configured your servlet container
  to use the {{{http://maven.apache.org/plugins/maven-war-plugin/inplace-mojo.html}"inplace"}} mode of the war plugin.

* Compilation process failing

  You may get compilation errors due to <<<OutOfMemoryException>>> or <<<StackOverflowException>>>. The compilation and
  permutation process used by GWTCompiler is a high memory consumer, with many recursive steps. You can get rid of those 
  errors by setting the JVM parameters used to create the child process where GWT compilation occurs :
  
+--
<project>
  [...]
  <build>
    <plugins>
      [...]
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>gwt-maven-plugin</artifactId>
        <version>1.1</version>
        <executions>
          <execution>
            <configuration>
              <extraJvmArgs>-Xmx512M -Xss1024k</extraJvmArgs>
            </configuration>
            <goals>
              <goal>compile</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      [...]
    </plugins>
  </build>
  [...]
</project>
+--
  

* Compiler output directory

  gwt-maven-plugin use by default the web application source directory <<<src/main/webapp>>> as output folder. 
  One of Maven principle is
  to always put files created during build in the <<<buildDirectory>>> (<<<target>>>) folder. Please note this is only a 
  principle, and not a requirement : pragmatic developers created the 
  {{{http://maven.apache.org/plugins/maven-war-plugin/inplace-mojo.html}war:inplace}}
  goal to setup an explosed WAR structure in the source folder for rapid JEE development without the time-consuming 
  package/deploy/restart cycle.
  
  GWTCompiler output default-value is set to match multiple considerations :
  
  From the maven-war-plugin point of view, the generated JavaScript files are static resources that are expected in the
  <<<warSourceDirectory>>>. Until maven-war-plugin has a release to support the maven 2.1 <<<prepare-package>>> phase, there is no
  clean way to plugin into WAR packaging to add the compiler output to the exploded webapp.
  
  Using this folder is also very usefull for those of us that run a server using 
  {{{http://mojo.codehaus.org/tomcat-maven-plugin/run-mojo.htm}tomcat:run}} or
  {{{http://jetty.mortbay.org/jetty/maven-plugin/run-mojo.html}jetty:rnu}} goals. Those plugins don't require any packaging
  to launch the webapp, and handle nicelly Maven dependencies and classes without requirement for a <<<WEB-INF/lib>>> and 
  <<<WEB-INF/classes>>>. With this default GWTCompiler output directory, the application can be run as is with no packaging
  requirement.
  
  
  