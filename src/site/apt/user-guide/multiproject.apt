~~ -*- mode: orgstruct; -*-

 ------
 GWT in a multi-project setup
 ------
 Stefan HÃ¼bner (sthuebner@googlemail.com)
 ------


Multi-Project Setup

  Often, larger Maven projects will be divided into sub projects. How
  to use GWT-maven-plugin in such a setup is described in this
  section.

  First, we will setup a basic Maven project structure
  consisting of two subprojects: one containing domain code and
  another one containing the actual GWT application. After this has
  been set up, we will see, how Maven packages the application using
  the GWT-maven-plugin.

* Introduction

~~- what is "multi-project setup"? is there a guide in the maven docu?
~~- how does gwt-maven-plugin fit in? (skip compilation, e.g.)
~~- Example layout

  In Maven sub projects are called modules. Maven-modules support the
  concept of
  {{{http://maven.apache.org/guides/introduction/introduction-to-the-pom.html#Project_Aggregation}project
  aggregation}}. In the context of a GWT application, like in a normal
  web application, a common example could be to separate GUI
  functionality from domain functionality (among others).

  We will use
  {{{http://fisheye.codehaus.org/browse/mojo/trunk/mojo/gwt-maven-plugin/src/it/reactor}this
  plugin's reactor it-test}} as a sample project layout (note: this is
  not a comprehensive example. It just demonstrates the basic
  principles):

+---+
reactor/                                     (aggregating parent project)
|- pom.xml
|
|- jar/                                      (domain code, etc.; packaging: JAR)
|  |- pom.xml
|  \- src/main/java/
|     \- org/codehaus/mojo/gwt/test/
|        |- Domain.gwt.xml
|        \- domain/User.java
|
\- war/                                      (GUI code; packaging: WAR)
   |- pom.xml
   \- src/
      |- main/java/
      |  \ -org/codehaus/mojo/gwt/test/
      |     |- Hello.gwt.xml
      |     \- client/Hello.java
      \- main/webapp/
         \- WEB-INF/web.xml
+---+

  The <<<reactor>>> project contains two subprojects - <<<jar>>> and
  <<<war>>>. <<<jar>>> contains a <<<Domain>>> GWT module consisting
  of it's module descriptor <<<Domain.gwt.xml>>> and a <<<User>>>
  class. The <<<war>>> subproject contains another GWT module called
  <<<Hello>>> consisting of it's module descriptor <<<Hello.gwt.xml>>>
  and a <<<Hello>>> class.

  <<NOTE>> that GWT also has a notion of
  {{{http://code.google.com/webtoolkit/doc/1.6/DevGuideOrganizingProjects.html#DevGuideModules}module}}. Both
  Maven and GWT use the term <module> to define units of
  modularization. To a degree both concepts go hand in hand, as
  GWT-modules define boundaries at which Maven-modules might be
  cut. To not confuse these two terms though, for the rest of this
  section we will use the term <<module>>, if we talk about
  <<GWT>>-modules, in contrast to the term <<project>>, if we talk
  about <<Maven>>-modules.


  
* Necessary Steps

** Subproject: <<<jar>>>

   Here's how the <<<jar>>> subproject looks like. We'll define a
   <<<org.codehaus.mojo.gwt.test.domain.User>>> class:

%{snippet|id=user-class|file=src/it/reactor/jar/src/main/java/org/codehaus/mojo/gwt/test/domain/User.java}

   This class will be living in a GWT module called
   <<<org.codehaus.mojo.gwt.test.Domain>>>:

%{snippet|id=domain-module|file=src/it/reactor/jar/src/main/java/org/codehaus/mojo/gwt/test/Domain.gwt.xml}

   The last step is to setup the <<<pom.xml>>>. Please note the
   special <<<build/resources>>> declaration:

%{snippet|id=jar-pom|file=src/it/reactor/jar/pom.xml}

   Sources need to be bundled with the JAR in order for the GWT
   compiler to be able to compile them during reactor build.

   Next is to setup the <<<war>>> subproject.

** Subproject: <<<war>>>

   First, here's the class
   <<<org.codehaus.mojo.gwt.test.client.Hello>>>:

%{snippet|id=hello-class|file=src/it/reactor/war/src/main/java/org/codehaus/mojo/gwt/test/client/Hello.java}

   It calls <<<Domain>>>'s <<<User>>> class and displays the result in
   the root panel.

   Next is to setup GWT module <<<org.codehaus.mojo.gwt.test.Hello>>>.
   The important thing to note is that this module inherits the
   <<<Domain>>> module:

%{snippet|id=hello-module|file=src/it/reactor/war/src/main/java/org/codehaus/mojo/gwt/test/Hello.gwt.xml}

   Finally, in the <<<war>>>'s POM a dependency to the
   <<<jar>>>-artifact will be declared and the gwt-maven-plugin needs
   to be setup:

%{snippet|id=war-pom|file=src/it/reactor/war/pom.xml}

   Since the <<<jar>>>-dependency bundles it's sources, they will be
   visible to GWT's compiler.

** Main Project: <<<reactor>>>

   Eventually, we will glue it all together in the main project's POM:

%{snippet|id=reactor-pom|file=src/it/reactor/pom.xml}

   Note the two subprojects are declared as modules here.

* Compiling the Application

  In order to compile the whole project Maven can be invoked like
  this:

---
reactor$ mvn clean package
---

  Since GWT-maven-plugin's compile-goal is bound to Maven's
  <<<process-classes>>> lifecycle phase, the GWT compiler will compile
  all client code into JavaScript. This code will be packaged along
  with any other resources into the resulting WAR bundle.

  You'll find the packaged application in <<<war/target/war-1.0-SNAPSHOT.war>>>
