 ------
GWT Maven Plugin Usage
 ------
 ------
 ------

Configuring Google Web Toolkit support for maven

* Translate GWT application to JavaScript

  You can use the following configuration in your pom.xml to run the GWT compiler
  when the project is built.  By default, the plugin is configured
  to be executed during the ''compile'' phase.

+---+
<project>
  [...]
  <build>
    <plugins>
      [...]
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>gwt-maven-plugin</artifactId>
        <executions>
          <execution>
            <configuration>
              <module>com.mycompany.gwt.Module</module>
            </configuration>
            <goals>
              <goal>compile</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      [...]
    </plugins>
  </build>
  [...]
</project>
+---+

* Generate DTO from JPA-annotated entities

  The plugin can generate Data Transfert Objects from JPA-annotated entities. Such beans are
  not compatible with GWT 1.4, but hibernate4gwt can be used to bypass this limitation and
  clone/merge on the fly entities to be exposed to the GWT application as DTOs.
  By default, the plugin is configured to be executed during the ''generate-source'' phase.
  The entities must be available as classes during this phase, so they need to be provided
  in an external jar, and not live in the same project as java sources.

+---+
<project>
  [...]
  <build>
    <plugins>
      [...]
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>gwt-maven-plugin</artifactId>
        <executions>
          <execution>
            <configuration>
              <packageScan>com.mycompany.domain</packageScan>
              <dtoPackage>com.mycompany.gwt.dto</dtoPackage>
            </configuration>
            <goals>
              <goal>generate</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      [...]
    </plugins>
  </build>
  [...]
</project>
+---+